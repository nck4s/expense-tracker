import { createContext, useReducer, useContext, useEffect } from "react";

// üéØ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage)
const initialState = JSON.parse(localStorage.getItem("expenses")) || [];

// üéØ –§—É–Ω–∫—Ü–∏—è-—Ä–µ–¥—å—é—Å–µ—Ä
function expenseReducer(state, action) {
  switch (action.type) {
    case "ADD_EXPENSE":
      return [...state, action.payload];
    case "REMOVE_EXPENSE":
      return state.filter(expense => expense.id !== action.payload);
    default:
      return state;
  }
}

// üéØ –°–æ–∑–¥–∞—ë–º Context
const ExpenseContext = createContext();

// üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä (–û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
export function ExpenseProvider({ children }) {
  const [expenses, dispatch] = useReducer(expenseReducer, initialState);

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞
  useEffect(() => {
    localStorage.setItem("expenses", JSON.stringify(expenses));
  }, [expenses]);

  return (
    <ExpenseContext.Provider value={{ expenses, dispatch }}>
      {children}
    </ExpenseContext.Provider>
  );
}

// üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
export function useExpenseContext() {
  return useContext(ExpenseContext);
}
